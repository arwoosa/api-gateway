openapi: 3.0.3
info:
  title: OOSA_USER_SERVICE
  description: This is OOSA's User API
  version: "1.0.0"


paths:
  /auth:
    get:
      summary: Authentication
      description: Retrieve the authenticated user detail. <br/>1. Google<br/>2. Line<br/>3. Email<br/>4. Facebook
      security:
        - Bearer: []
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
      tags: 
        - Authentication
    put:
      summary: Update authenticated user detail
      description: Update the authenticated user detail
      requestBody:
        description: Pass in only the necessary objects you want to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUsersUpdate'
      security:
        - Bearer: []
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
      tags: 
        - Authentication
  /auth/google:
    post:
      summary: User login/register
      description: Use this endpoint to login/register using google
      requestBody:
        description: Pass in the value from Google's Login (We will use this value to get the user credentials)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestGoogleAuth'
      responses:
        200:
          description: Login object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserLogin'
      tags: 
        - Authentication
  /auth/facebook:
    post:
      summary: User login/register
      description: Use this endpoint to login/register using Facebook
      responses:
        200:
          description: Login object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserLogin'
      tags: 
        - Authentication
  /auth/line:
    get:
      summary: User login/register
      parameters:
        - in: query
          name: code
          schema:
            type: string
          description: Code passed to line
        - in: query
          name: state
          schema:
            type: string
          description: State passed to line
      description: Use this endpoint to login/register using Line
      responses:
        200:
          description: Login object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserLogin'
      tags: 
        - Authentication
  /auth/apple:
    post:
      summary: User login/register
      description: Use this endpoint to login/register using Apple
      responses:
        200:
          description: Login object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserLogin'
      tags: 
        - Authentication
  /auth/email:
    post:
      summary: User login
      description: Use this endpoint to login using email
      requestBody:
        description: Register email object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUserLoginEmail'
      responses:
        200:
          description: Login object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserLogin'
      tags: 
        - Authentication
  /auth/change-password:
    put:
      summary: Update authenticated user password
      description: Update the authenticated user password
      requestBody:
        description: Pass in new password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUsersUpdatePassword'
      security:
        - Bearer: []
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Authentication
  /auth/profile-picture:
    post:
      summary: User profile picture
      description: Update profile picture
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                users_avatar:
                  type: string
                  format: binary
      security:
        - Bearer: []
      responses:
        200:
          description: User Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags: 
        - Authentication
  /auth/avatar:
    post:
      summary: Update user avatar
      description: Update user avatar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestAuthUpdateAvatar'
      security:
        - Bearer: []
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
      tags: 
        - Authentication
  /auth/setting:
    put:
      summary: Update settings
      description: Update settings<br/>1 - True (On)<br />0 - False (Off)
      security:
        - Bearer: []
      requestBody:
        description: Update settings object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestAuthUpdateSetting'
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
      tags: 
        - Authentication
  /auth/badges:
    get:
      summary: User badges
      description: Retrieve badges earned by user
      parameters:
        - name: single
          in: query
          description: Single acquire
          schema:
            type: boolean
            default: true
      security:
        - Bearer: []
      responses:
        200:
          description: User badges object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserBadges'
      tags: 
        - User Badges
  /auth/notifications:
    get:
      summary: User notifications
      description: Retrieve notifications
      security:
        - Bearer: []
      responses:
        200:
          description: Notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserNotifications'
      tags: 
        - User Notifications
  /register:
    post:
      summary: User register
      description: Use this endpoint to register using email
      requestBody:
        description: Register email object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUserRegisterEmail'
      responses:
        200:
          description: Login object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/UserLogin'
        204:
          description: If user exists
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResponseGeneralError'
      tags: 
        - Authentication
  /user-following:
    get:
      summary: Get user following
      description: Get user following
      security:
        - Bearer: []
      responses:  
        200:
          description: User following
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserFollowings"
      tags:
        - User Following
    post:
      summary: Create user following
      description: Create user following
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUserFollowing'
      responses:  
        200:
          description: User following
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFollowings"
      tags:
        - User Following
  /user-following/{userFollowingId}:
    get:
      summary: Get user following
      description: Get user following
      parameters:
        - name: userFollowingId
          in: path
          description: String ID of the user following
          schema:
            type: integer
          required: true
      security:
        - Bearer: []
      responses:  
        200:
          description: User following
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFollowings"
      tags:
        - User Following
    delete:
      summary: Delete user following
      description: Delete user following
      parameters:
        - name: userFollowingId
          in: path
          description: String ID of the user following
          schema:
            type: integer
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - User Following
  /user/friends:
    get:
      summary: Get user friends
      description: Get user friends
      security:
        - Bearer: []
      responses:  
        200:
          description: User friends
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFriends"
      tags:
        - User - Friends
  
  /contact-us:
    post:
      summary: Contact Us
      description: Create contact us record
      security:
        - Bearer: []
      requestBody:
        description: Contact Us Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestContactUs'
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Contact Us
  /forget-password:
    post:
      summary: Forget Password
      description: Forget Password Request
      security:
        - Bearer: []
      requestBody:
        description: Forget Password Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestForgetPassword'
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Forget Password
  /forget-password/{token}:
    post:
      summary: Forget Password
      description: Update password from forget password
      security:
        - Bearer: []
      parameters:
        - name: token
          in: path
          description: Token from password reset
          schema:
            type: integer
          required: true
      requestBody:
        description: Reset Password Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestForgetPasswordReset'
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Forget Password

components:
  schemas:
    User:
      type: object
      properties:
          users_id:
            type: string
          users_source:
            type: integer
            format: int32
          users_source_id:
            type: string
          users_name:
            type: string
          users_username:
            type: string
          users_email:
            type: string
          users_password:
            type: string
          users_object:
            type: string
          users_avatar:
            type: string
          users_setting_language:
            type: string
          users_setting_is_visible_friends:
            type: integer
            format: int32
          users_setting_is_visible_statistics:
            type: integer
            format: int32
          users_setting_visibility_activity_summary:
            type: integer
            format: int32
          users_setting_friend_auto_add:
            type: integer
            format: int32
          users_is_subscribed:
            type: boolean
            default: false
          users_is_business:
            type: boolean
            default: false
          users_created_at:
            type: string
            format: int32
    UserLogin:
      type: object
      properties:
          user:
            type: object
            $ref: "#/components/schemas/User"
          token:
            type: string
    UserFollowings:
      type: object
      properties:
        user_followings_id:
          type: string
        user_followings_user:
          type: string
        user_followings_following:
          type: string
        user_followings_created_at:
          type: string
    UserFriends:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/UserFriendsOne"
    UserFriendsOne:
      type: object
      properties:
          users_id:
            type: string
            default: 6613fae21977170d4fd608a6
          users_name:
            type: string
            default: Tommy
          users_avatar:
            type: string
            default: AVATAR_1
    UserBadges:
      type: object
      properties:
          user_badges_id:
            type: string
            default: 669556094dc5739b71e173fe
          user_badges_user:
            type: string
            default: 65f6861102948c60bcb3cb1d
          user_badges_badge:
            type: string
            default: 6695534c1da4d6fee70fc3e4
          user_badges_created_at:
            type: string
            default: 2024-07-15T17:02:01.037Z
          user_badges_detail:
            type: object
            $ref: "#/components/schemas/UserBadgesDetail"
    UserBadgesDetail:
      type: object
      properties:
          badges_id:
            type: string
            default: 6695534c1da4d6fee70fc3e4
          badges_code:
            type: string
            default: N1
          badges_name:
            type: string
            default: 1st. Rewild
    UserNotifications:
      type: object
      properties:
        notifications_id:
          type: string
          default: 669560b1e7777ddfc76043c2
        notifications_code:
          type: string
          default: Invitation
        notifications_type:
          type: string
          default: New
        notifications_user:
          type: string
          default: 65f6861102948c60bcb3cb1d
        notifications_message:
          type: string
          default: TEST
        notifications_identifier:
          type: string
          default: 66005b3ef4ca36269a55b468
        notifications_created_at:
          type: string
          default: 2024-07-15T17:47:29.074Z
        notifications_created_by:
          type: string
          default: 65f6861102948c60bcb3cb1d
    ContactUs:
      type: object
      properties:
          contact_us_id:
            type: string
          contact_us_email:
            type: string
          contact_us_message:
            type: string
          contact_us_created_at:
            type: string
    RequestContactUs:
      type: object
      properties:
          email:
            type: string
          message:
            type: string
    RequestGoogleAuth:
      type: object
      properties:
        credential:
          type: string
    RequestUserLoginEmail:
      type: object
      properties:
        email:
          type: string
          default: user@arwork.tw
        password:
          type: string
          default: 123
    RequestUserRegisterEmail:
      type: object
      properties:
        name:
          type: string
          default: Test User
        email:
          type: string
          default: user@arwork.tw
        password:
          type: string
          default: 123
        is_business:
          type: boolean
          default: false
    RequestUserFollowing:
      type: object
      properties:
        user_followings_following:
          type: string
          default: 6613fae21977170d4fd608a6
    RequestUsersUpdate:
      type: object
      properties:
        users_username:
          type: string
          default: xiaolongbao
        users_name:
          type: string
          default: Tommy
        users_email:
          type: string
          default: tommy@oosa.ar.tw
        users_setting_language:
          type: string
          default: en
    RequestAuthUpdateSetting:
      type: object
      properties:
        users_setting_is_visible_friends:
          type: number
          default: 1
        users_setting_is_visible_statistics:
          type: number
          default: 1
        users_setting_visibility_activity_summary:
          type: number
          default: 1
        users_setting_friend_auto_add:
          type: number
          default: 0
    RequestAuthUpdateAvatar:
      type: object
      properties:
        users_avatar:
          type: string
          default: AVATAR_1
    RequestForgetPassword:
      type: object
      properties:
        email:
          type: string
          default: tommy@oosa.ar.tw
    RequestForgetPasswordReset:
      type: object
      properties:
        email:
          type: string
          default: tommy@oosa.ar.tw
        password:
          type: string
          default: 123456
    RequestUsersUpdatePassword:
      type: object
      properties:
        password:
          type: string
          default: 123456
        new_password:
          type: string
          default: 12345
    ResponseGeneralSuccess:
      type: object
      properties:
        message:
          type: string
    ResponseGeneralError:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Bearer