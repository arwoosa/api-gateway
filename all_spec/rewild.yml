openapi: 3.0.3
info:
  title: OOSA_REWILD_SERVICE
  description: This is OOSA's Rewild API
  version: "1.0.0"



paths:
  /me/event-invitation:
     get:
      summary: Event Invitation
      description: Retrieve all invitation
      security:
        - Bearer: []
      responses:
        200:
          description: Event invitation object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
      tags: 
        - Authenticated User Menu
  /me/event-invitation/{eventInvitationId}:
     get:
      summary: Event Invitation
      description: Retrieve event invitation by ID
      parameters:
        - name: eventInvitationId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Event invitation object
      tags: 
        - Authenticated User Menu
     put:
      summary: Update Event Invitation
      description: Update event invitation (approve or reject)
      parameters:
        - name: eventInvitationId
          in: path
          schema:
            type: string
          required: true
          description: String ID of the event
      requestBody:
        description: 1 - Accept, 0 Reject
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEventInvitation'
      security:
        - Bearer: []
      responses:
        200:
          description: Event invitation object
      tags: 
        - Authenticated User Menu
  /me/friends:
    get:
      summary: Retrieve user's friends (following)
      description: Retrieve user's friends (following)
      security:
        - Bearer: []
      responses:
        200:
          description: Array of User Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFriends'
      tags: 
        - Authenticated User Menu
  /me/preferences:
    get:
      summary: Retrieve user's preferences
      description: Retrieve user preferences (language, avatar, preference)
      security:
        - Bearer: []
      responses:
        200:
          description: Auth User Object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
      tags: 
        - Authenticated User Menu
    put:
      summary: Update user preferences
      description: Update user preferences (language, avatar, preference)
      security:
        - Bearer: []
      requestBody:
        description: Visibility 1 = true, 0 = false. Language used ISO3166
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUserPreference'
      responses:
        200:
          description: Auth User Object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
      tags: 
        - Authenticated User Menu
  /pocket-list:
    get:
      summary: Get pocket list 
      description: Get pocket list 
      security:
        - Bearer: []
      responses:
        200:
          description: Array of PocketList objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PocketList'
      tags: 
        - Pocket List
    post:
      summary: Create new pocket list 
      description: Create pocket list 
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPocketList'
      responses:
        200:
          description: New PocketList objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PocketList'
      tags: 
        - Pocket List
  /pocket-list/{pocketListId}:
    get:
      summary: Get pocket list 
      description: Get pocket list 
      parameters:
        - name: pocketListId
          in: path
          description: String ID of the user to get pocket list
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of PocketList objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PocketList'
      tags: 
        - Pocket List
    put:
      summary: Update existing pocket list 
      description: Update existing pocket list 
      parameters:
        - name: pocketListId
          in: path
          description: String ID of the user to get pocket list
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPocketList'
      responses:
        200:
          description: Updated pocket list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PocketList'
      tags: 
        - Pocket List
    delete:
      summary: Delete pocket list 
      description: Delete pocket list 
      parameters:
        - name: pocketListId
          in: path
          description: String ID of the user to get pocket list
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Pocket List
  /pocket-list/{pocketListId}/items:
    get:
      summary: Get pocket list items by ID 
      description: Get pocket list items by ID
      parameters:
        - name: pocketListId
          in: path
          description: String ID of the user to get pocket list
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of PocketList objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PocketListItems'
      tags: 
        - Pocket List
    post:
      summary: Add to pocket list
      description: Add to pocket list
      requestBody:
        description: Pass either one of the two parameter
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPocketListItem'
      parameters:
        - name: pocketListId
          in: path
          description: String ID of the user to get pocket list
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of PocketList objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PocketListItems'
      tags: 
        - Pocket List
  /pocket-list/{pocketListId}/items/{pocketListItemsId}:
    get:
      summary: Get pocket list item by ID 
      description: Get pocket list item by ID
      parameters:
        - name: pocketListId
          in: path
          description: String ID of the user to get pocket list
          schema:
            type: string
          required: true
        - name: pocketListItemsId
          in: path
          description: String ID of the user to get pocket list item
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of PocketListItems
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PocketListItems'
      tags: 
        - Pocket List
    delete:
      summary: Delete pocket list item by ID 
      description: Delete pocket list item by ID
      parameters:
        - name: pocketListId
          in: path
          description: String ID of the user to get pocket list
          schema:
            type: string
          required: true
        - name: pocketListItemsId
          in: path
          description: String ID of the user to get pocket list item
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of PocketListItems
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Pocket List
  /event:
    get:
      summary: Event
      description: Retrieve all events
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
      tags: 
        - Event
    post:
      summary: Event
      description: Create new event
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEvent'
      responses:
        200:
          description: New Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      tags: 
        - Event
  /event/references:
    get:
      summary: Event
      description: Event options
      responses:
        200:
          description: New Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewildingOptions'
      tags: 
        - Event
  /event/{eventId}:
    get:
      summary: Event
      description: Retrieve an event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      tags: 
        - Event
    put:
      summary: Event
      description: Update an event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEvent'
      security:
        - Bearer: []
      responses:
        200:
          description: Updated Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      tags: 
        - Event
    delete:
      summary: Event
      description: Delete an event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Delete response (message)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Event
  /event/{eventId}/participants:
    get:
      summary: Event
      description: Retrieve an event's participants
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: EventParticipant Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventParticipants'
      tags: 
        - Event Participants
    post:
      summary: Invite a participant to event
      description: Invite a participant to event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEventParticipant'
      security:
        - Bearer: []
      responses:
        200:
          description: New EventParticipant Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParticipants'
      tags: 
        - Event Participants
    delete:
      summary: Event
      description: Remove a participant from an event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Response message (success)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Event Participants
  /event/{eventId}/message-board:
    get:
      summary: Event Message Board
      description: Retrieve an event's message board
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of EventMessageBoard Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventMessageBoard'
      tags: 
        - Event Message Board
    post:
      summary: Event Message Board
      description: Create an entry on event's message board
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      requestBody:
        description: Send either event_message_board_base_message or event_message_board_announcement
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEventMessageBoard'
      responses:
        200:
          description: New EventMessageBoard Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventMessageBoard'
      tags: 
        - Event Message Board
  /event/{eventId}/message-board/{messageBoardId}:
    delete:
      summary: Delete message board entry
      description: Delete an entry on event's message board
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
        - name: messageBoardId
          in: path
          description: String ID of the message
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Event Message Board
  /event/{eventId}/itinerary:
    get:
      summary: Event Itinerary
      description: Retrieve an event's itinerary
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object with itinerary
      tags: 
        - Event
    put:
      summary: Event Message Board
      description: Itinerary co-edit
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object with itinerary
      tags: 
        - Event
  /event/{eventId}/reference-links:
    get:
      summary: Event Reference Links
      description: Retrieve an event's reference links
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of EventReferenceLinks Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventReferenceLinks'
      tags: 
        - Event Reference Links
    post:
      summary: Create Reference Links
      description: Create an event's reference links
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEventReferenceLinks'
      responses:
        200:
          description: Array of EventReferenceLinks Object
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/EventReferenceLinks'
      tags: 
        - Event Reference Links
    delete:
      summary: Event Reference Links
      description: Delete an event's reference links
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Event Reference Links
  /event/{eventId}/schedule:
    get:
      summary: Event Schedule
      description: Retrieve an event's schedule
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of EventReferenceLinks Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSchedules'
      tags: 
        - Event Schedule
    post:
      summary: Create Event Schedule
      description: Create an event's schedule
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEventSchedulesBulk'
      responses:
        200:
          description: Array of EventReferenceLinks Object
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/EventSchedules'
      tags: 
        - Event Schedule
    delete:
      summary: Delete Event Schedule
      description: Delete an event's schedule
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Event Schedule
  /event/{eventId}/accounting:
    get:
      summary: Event Accounting
      description: Retrieve an event's accounting
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of EventAccounting Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventAccounting'
      tags: 
        - Event Accounting
    post:
      summary: Create Event Accounting
      description: Create an entry on event's accounting
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      requestBody:
        description: Accounting object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEventAccounting'
      responses:
        200:
          description: New EventMessageBoard Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAccounting'
      tags: 
        - Event Accounting
  /event/{eventId}/accounting/{accountingId}:
    delete:
      summary: Delete accounting entry
      description: Delete an entry on event's accounting
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
        - name: accountingId
          in: path
          description: String ID of the accounting record
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGeneralSuccess'
      tags: 
        - Event Accounting
  /my/event:
    get:
      summary: User Event
      parameters:
        - in: query
          name: past
          schema:
            type: boolean
          description: Pass true to retrieve past events by user. Otherwise omit this query parameter
      description: Retrieve an authenticated user events
      security:
        - Bearer: []
      responses:
        200:
          description: Array of EventReferenceLinks Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
      tags: 
        - User Event
  /collaborative-log:
    get:
      summary: Event Collaborate
      description: Retrieve events that has ended
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Events'
      tags: 
        - Event Collaborate
  /collaborative-log/{eventId}:
    get:
      summary: Event Collaborate
      description: Retrieve detail on event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      tags: 
        - Event Collaborate
  /collaborative-log/{eventId}/album-link:
    get:
      summary: Event Collaborate
      description: Retrieve album link in event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventAlbumLink'
      tags: 
        - Event Collaborate
    post:
      summary: Event Collaborate
      description: Retrieve album link in event
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEventAlbumLinks'
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAlbumLink'
      tags: 
        - Event Collaborate
  /collaborative-log/{eventId}/polaroid:
    get:
      summary: Event Polaroid
      description: Retrieve event polaroid
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            form-data:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventPolaroids'
      tags: 
        - Event Collaborate
    post:
      summary: Event Polaroid
      description: Create event polaroid (Uploaded file will be uploaded on Flickr). Read location data and save to database
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                event_polaroid_file:
                  type: string
                  format: binary
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAlbumLink'
      tags: 
        - Event Collaborate
  /collaborative-log/{eventId}/questionnaire:
    post:
      summary: Event Polaroid
      description: Create event polaroid (Uploaded file will be uploaded on Flickr). Read location data and save to database
      parameters:
        - name: eventId
          in: path
          description: String ID of the event
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCollaborativeLogQuestionnaire'
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
      tags: 
        - Event Collaborate
  /rewilding:
    get:
      summary: Retrieve all rewilding spots
      description: Retrieve rewilding spots in database
      security:
        - Bearer: []
      responses:
        200:
          description: Array of Rewilding
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rewilding'
      tags: 
        - Rewilding
    post:
      summary: Create rewilding spot
      description: Create rewilding spot by user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRewildingCreate'
      security:
        - Bearer: []
      responses:
        200:
          description: Event Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rewilding'
      tags: 
        - Rewilding
  /rewilding/references:
    get:
      summary: Retrieve all options on rewilding types
      description: Retrieve all options on rewilding types
      security:
        - Bearer: []
      responses:
        200:
          description: Array of Rewilding Types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewildingOptions'
      tags: 
        - Rewilding
  /rewilding/{rewildingId}:
    get:
      summary: Read a rewilding spot
      description: Read a rewilding spot in database
      parameters:
        - name: rewildingId
          in: path
          description: String ID of rewilding
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Rewilding detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rewilding'
      tags: 
        - Rewilding
  /rewilding/{rewildingId}/photos:
    get:
      summary: Retrieve all photos tied to a rewilding
      description: Retrieve all photos tied to a rewildings
      parameters:
        - name: rewildingId
          in: path
          description: String ID of rewilding
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of Rewilding Photo ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RewildingPhotos'
      tags: 
        - Rewilding
  /rewilding/{rewildingId}/photos/{photoId}:
    get:
      summary: Read a photo
      description: Read a photo
      parameters:
        - name: rewildingId
          in: path
          description: String ID of rewilding
          schema:
            type: string
          required: true
        - name: photoId
          in: path
          description: String ID of photo
          schema:
            type: string
          required: true
      security:
        - Bearer: []
      responses:
        200:
          description: Array of Rewilding Photo ID
          content:
            image/*:
              schema: 
                type: string
                format: binary
      tags: 
        - Rewilding
  /rewilding-search:
    get:
      summary: Search
      description: Read a photo
      parameters:
        - name: lat
          in: query
          description: Latitude
          schema:
            type: string
        - name: lng
          in: query
          description: Longitude
          schema:
            type: string
        - name: type
          in: query
          description: Activity type
          schema:
            type: string
        - name: search
          in: query
          description: Search by Text
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        200:
          description: Array of Rewilding Result from Google
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RewildingSearch"
      tags: 
        - Rewilding Search   
components:
  schemas:
    User:
      type: object
      properties:
          users_id:
            type: string
          users_source:
            type: integer
            format: int32
          users_name:
            type: string
          users_object:
            type: string
          users_avatar:
            type: string
          users_setting_language:
            type: string
          users_vis_events:
            type: integer
            format: int32
          users_setting_vis_achievement_journal:
            type: integer
            format: int32
          users_setting_vis_achievement_collab_log:
            type: integer
            format: int32
          users_setting_vis_follow:
            type: integer
            format: int32
          users_is_subscribed:
            type: integer
            format: int32
          users_is_business:
            type: boolean
          users_created_at:
            type: string
            format: int32
    UserAgg:
      type: object
      properties:
          user_id:
            type: string
          user_name:
            type: string
          user_email:
            type: string
          user_avatar:
            type: string
    UserFriends:
      type: object
      properties:
          users_id:
            type: string
          users_name:
            type: string
          users_avatar:
            type: string
    UserMilestones:
      type: object
      properties:
        user_milestones_id:
          type: string
        user_milestones_milestone:
          type: string
        user_milestones_created_by:
          type: string
        user_milestones_created_at:
          type: string
    PocketList:
      type: object
      properties:
        pocket_lists_id:
          type: string
        pocket_lists_user:
          type: string
        pocket_lists_name:
          type: string
        pocket_lists_count:
          type: integer
          format: int32
        pocket_lists_deleted_at:
          type: string
        pocket_lists_created_at:
          type: string
    PocketListItems:
      type: object
      properties:
        pocket_list_items_id:
          type: string
        pocket_list_items_mst:
          type: string
        pocket_list_items_event:
          type: string
        pocket_list_items_rewilding:
          type: string
        pocket_list_items_deleted_at:
          type: string
        pocket_list_items_created_at:
          type: string
    Events:
      type: object
      properties:
        events_id:
          type: string
        events_date:
          type: string
        events_date_end:
          type: string
        events_deadline:
          type: string
        events_name:
          type: string
        events_rewilding:
          type: string
        events_place:
          type: string
        events_type:
          type: string
        events_invitation_message:
          type: string
        events_participant_limit:
          type: number
        events_payment_required:
          type: integer
        events_payment_fee:
          type: string
        events_requires_approval:
          type: integer
        events_questionnaire_link:
          type: string
        events_lat:
          type: number
        events_lng:
          type: number
        events_meeting_point_lat:
          type: number
        events_meeting_point_lng:
          type: number
        events_created_by:
          type: string
        events_created_at:
          type: string
    EventAccounting:
      type: object
      properties:
        event_accounting_id:
          type: string
        event_accounting_event:
          type: string
        event_accounting_message:
          type: string
        event_accounting_amount:
          type: number
        event_accounting_created_by:
          type: string
        event_accounting_created_at:
          type: string
        event_accounting_updated_by:
          type: string
        event_accounting_updated_at:
          type: string
        event_accounting_created_by_user:
          $ref: '#/components/schemas/UserAgg'
    EventAlbumLink:
      type: object
      properties:
        event_album_link_id:
          type: string
        event_album_link_event:
          type: string
        event_album_link_album_url:
          type: string
        event_album_link_visibility:
          type: integer
        event_album_link_created_by:
          type: string
        event_album_link_created_at:
          type: string
    EventMessageBoard:
      type: object
      properties:
        event_message_board_id:
          type: string
        event_message_board_event:
          type: string
        event_message_board_base_message:
          type: string
        event_message_board_status:
          type: integer
        event_message_board_category:
          type: string
        event_message_board_announcement:
          type: string
        event_message_board_created_by:
          type: string
        event_message_board_created_at:
          type: string
        event_message_board_is_pinned:
          type: integer
        event_message_board_created_by_user:
          $ref: '#/components/schemas/UserAgg'
    EventParticipants:
      type: object
      properties:
        event_participants_id:
          type: string
        event_participants_event:
          type: string
        event_participants_user:
          type: string
        event_participants_status:
          type: string
        event_participants_is_paid:
          type: integer
        event_participants_paid_amount:
          type: number
        event_participants_paid_at:
          type: string
        event_participants_payment_request:
          type: string
        event_participants_payment_response:
          type: string
        event_participants_created_by:
          type: string
        event_participants_created_at:
          type: string
        event_participants_user_detail:
          $ref: '#/components/schemas/UserAgg'
    EventPolaroids:
      type: object
      properties:
        event_polaroids_id:
          type: string
        event_polaroids_event:
          type: string
        event_polaroids_url:
          type: string
        event_polaroids_lat:
          type: number
        event_polaroids_lng:
          type: number
        event_polaroids_created_by:
          type: string
        event_polaroids_created_at:
          type: string
    EventSchedules:
      type: object
      properties:
          event_schedules_id:
              type: string
          event_schedules_event:
              type: string
          event_schedules_datetime:
              type: string
          event_schedules_created_at:
              type: string
          event_schedules_created_by:
              type: string
          event_schedules_created_by_user:
            $ref: '#/components/schemas/UserAgg'
    EventReferenceLinks:
      type: object
      properties:
          event_reference_links_id:
              type: string
          event_reference_links_event:
              type: string
          event_reference_links_link:
              type: string
          event_reference_links_created_at:
              type: string
          event_reference_links_created_by:
              type: string
          event_reference_links_created_by_user:
            $ref: '#/components/schemas/UserAgg'
    Rewilding:
      type: object
      properties:
        rewilding_id:
          type: string
        rewilding_type:
          type: string
        rewilding_city:
          type: string
        rewilding_area:
          type: string
        rewilding_name:
          type: string
        rewilding_rating:
          type: number
        rewilding_lat:
          type: number
        rewilding_lng:
          type: number
    RewildingApply:
      type: object
      properties:
        rewilding_apply_id:
          type: string
        rewilding_apply_type:
          type: string
        rewilding_apply_city:
          type: string
        rewilding_apply_area:
          type: string
        rewilding_apply_name:
          type: string
        rewilding_apply_rating:
          type: number
        rewilding_apply_lat:
          type: number
        rewilding_apply_lng:
          type: number
        rewilding_apply_created_by:
          type: string
        rewilding_apply_created_at:
          type: string
    RewildingApplyPhotos:
      type: object
      properties:
        rewilding_apply_photos_id:
          type: string
        rewilding_apply_photos_rewilding_apply:
          type: string
        rewilding_apply_photos_path:
          type: string
    RewildingPhotos:
      type: object
      properties:
        rewilding_photos_id:
          type: string
    RewildingWiki:
      type: object
      properties:
        rewilding_wiki_id:
          type: string
        rewilding_wiki_type:
          type: string
        rewilding_wiki_rewilding:
          type: string
        rewilding_wiki_event:
          type: string
        rewilding_wiki_photo:
          type: string
        rewilding_wiki_comments:
          type: string
        rewilding_wiki_feelings:
          type: string
        rewilding_wiki_created_by:
          type: string
        rewilding_wiki_created_at:
          type: string
    RefRewildingTypes:
      type: object
      properties:
        ref_rewilding_types_id:
          type: string
          default: 662696ebfc72a35c9b066f41
        ref_rewilding_types_name:
          type: string
          default: 登山
        ref_rewilding_types_name_en:
          type: string
          default: Mountain Climbing
        ref_rewilding_types_google:
          type: string
          default: national_park,hiking_area
        ref_rewilding_types_key:
          type: string
          default: mountain_climbing
    RewildingOptions:
      type: object
      properties:
        rewilding_types:
          type: array
          items:
            $ref: '#/components/schemas/RefRewildingTypes'
    Sharing:
      type: object
      properties:
        sharing_id:
          type: string
        sharing_event:
          type: string
        sharing_event_album_link:
          type: string
        sharing_platform:
          type: string
        sharing_created_by:
          type: string
        sharing_created_at:
          type: string
    CollaborativeLog:
      type: object
      properties:
        collaborative_log_id:
          type: string
        collaborative_log_event:
          type: string
        collaborative_log_album_url:
          type: string
        collaborative_log_visibility:
          type: integer
        collaborative_log_created_by:
          type: string
        collaborative_log_created_at:
          type: string
    RewildingSearch:
      type: object
      properties:
        displayName:
          type: object
          properties:
            languageCode:
              type: string
            text:
              type: string
        formattedAddress:
          type: string
        id:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        rating:
          type: number
        types:
          type: array
          items:
            type: string
        userRatingCount:
          type: number
    RequestPocketList:
      type: object
      properties:
        pocket_lists_name:
          type: string
          default: Want to visit
    RequestPocketListItem:
      type: object
      properties:
        pocket_list_items_place_id:
          type: string
          default: ChIJJyIiioc21i0R-fNFWJonSxA
        pocket_list_items_place_name:
          type: string
          default: Bromo
    RequestEvent:
      type: object
      properties:
        events_date:
            type: string
            default: 2024-06-01 09:00:00
        events_date_end:
            type: string
            default: 2024-06-01 18:00:00
        events_deadline:
            type: string
            default: 2024-05-26 00:00:00
        events_name:
            type: string
            default: Hike to Bromo
        events_place:
            type: string
            default: ChIJk9cKlIwgbzQR2BE-g395glo
        events_rewilding:
            type: string
            default: 
        events_payment_required:
            type: integer
            default: 0
            format: int32
        events_payment_fee:
            type: number
            default: 450
        events_participant_limit:
            type: number
            default: 4
        events_requires_approval:
            type: integer
            default: 1
            format: int32
        events_lat:
            type: number
            default: -7.9421532937069514
        events_lng:
            type: number
            default: 112.95357004216902
        events_meeting_point_lat:
            type: number
            default: -7.929088255289928
        events_meeting_point_lng:
            type: number
            default: 112.9654222278174
    RequestEventInvitation:
      type: object
      properties:
        events_invitation_is_accept:
            type: integer
            format: int32
    RequestEventParticipant:
      type: object
      properties:
        event_participants_user:
            type: string
            default: 6613fae21977170d4fd608a6
    RequestEventMessageBoard:
      type: object
      properties:
        event_message_board_base_message:
            type: string
            default: Is there toilet there?
        event_message_board_announcement:
            type: string
            default: Please arrive 30 minutes before event start time
    RequestEventAccounting:
      type: object
      properties:
        event_accounting_message:
            type: string
            default: Entrance ticket
        event_accounting_amount:
            type: string
            default: 20.50
    RequestEventSchedulesBulk:
      type: object
      properties:
        schedule:
          type: array
          items:
            $ref: '#/components/schemas/RequestEventSchedules'
    RequestEventSchedules:
      type: object
      properties:
        event_schedules_datetime:
          type: string
          default: 2024-03-31 15:20:00
        event_schedules_description:
          type: string
          default: Gather#3
    RequestEventReferenceLinks:
      type: object
      properties:
        event_reference_links_link:
            type: string
            default: https://google.com.sg
        event_reference_links_title:
            type: string
            default: Google Singapore
    RequestEventAlbumLinks:
      type: object
      properties:
        event_album_link_album_url:
            type: string
            default: https://photos.google.com
        event_album_link_visibility:
            type: string
            default: 1
    RequestUserPreference:
      type: object
      properties:
        users_setting_language:
            type: string
        users_vis_events:
            type: integer
            format: int32
        users_setting_vis_achievement_journal:
            type: integer
            format: int32
        users_setting_vis_achievement_collab_log:
            type: integer
            format: int32
        users_setting_vis_follow:
            type: integer
            format: int32
    RequestRewildingCreate:
      type: object
      properties:
        rewilding_type:
          type: string
          default: 662696ebfc72a35c9b066f41
        rewilding_apply_official:
          type: boolean
          default: true,
        rewilding_reference_information:
          type: string
          default: www.google.com
        rewilding_pocket_list:
          type: string
          default: 66005467624a973abd8787d7
        rewilding_name:
          type: string
          default: TEST_REWILDING#2
        rewilding_lat:
          type: number
          default: 7.9422379184033,
        rewilding_lng:
          type: number
          default: 112.95275441058537
    RequestCollaborativeLogQuestionnaire:
      type: object
      properties:
        events_questionnaire_link:
          type: string
          default: https://surveycake.com/12
    ResponseGeneralSuccess:
      type: object
      properties:
        message:
          type: string
    ResponseGeneralError:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    Bearer:
      type: apiKey
      in: header
      name: Bearer